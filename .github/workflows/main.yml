name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          # Add your test commands here
          echo "Testing is skipped for this simple app"

      - name: Set up SonarQube Scanner
        uses: sonarsource/sonarcloud-github-action@v1
        with:
          entryPoint: sonar-scanner

      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=testing \
           
            -Dsonar.host.url=http://3.89.187.92:9000/ \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  deploy:
    name: Deploy to AWS EC2
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_KEY }}" > /tmp/ec2_key.pem
          chmod 600 /tmp/ec2_key.pem

      - name: Deploy Flask App to EC2
        env:
          EC2_USER: ubuntu
          EC2_IP: ${{ secrets.EC2_IP }}
        run: |
          # Transfer application files
          scp -i /tmp/ec2_key.pem -o StrictHostKeyChecking=no -r app.py requirements.txt templates/  $EC2_USER@$EC2_IP:/home/ubuntu/testing-
        
          # SSH into the EC2 instance to set up and run the app
          ssh -i /tmp/ec2_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_IP << EOF
            # Update and install dependencies
            sudo apt update
            sudo apt install -y python3-pip python3-venv
            
            # Navigate to the project directory
            cd /home/ubuntu/testing-
            
            # Create virtual environment and install dependencies
            python3 -m venv venv
            source venv/bin/activate
            pip install -r requirements.txt
            
            # Restart the application using Gunicorn
            pkill gunicorn || true
            gunicorn --bind 0.0.0.0:5000 app:app --daemon
          EOF

